{"ast":null,"code":"export async function redirectToAuthCodeFlow(clientId) {\n  const verifier = generateCodeVerifier(128);\n  const challenge = await generateCodeChallenge(verifier);\n  localStorage.setItem(\"verifier\", verifier);\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"response_type\", \"code\");\n  params.append(\"redirect_uri\", \"http://localhost:3000/callback\");\n  params.append(\"scope\", \"user-read-private user-read-email\");\n  params.append(\"code_challenge_method\", \"S256\");\n  params.append(\"code_challenge\", challenge);\n  console.log(\"CODE: \" + params.get(\"code\"));\n  localStorage.setItem(\"code\", params.get(\"code\"));\n  document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n}\nexport async function getAccessToken(clientId, code) {\n  const verifier = localStorage.getItem(\"verifier\");\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"grant_type\", \"authorization_code\");\n  params.append(\"code\", code);\n  params.append(\"redirect_uri\", \"http://localhost:3000/callback\");\n  params.append(\"code_verifier\", verifier);\n  const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: params\n  });\n  const {\n    access_token\n  } = await result.json();\n  return access_token;\n}\nfunction generateCodeVerifier(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nasync function generateCodeChallenge(codeVerifier) {\n  const data = new TextEncoder().encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)])).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}","map":{"version":3,"names":["redirectToAuthCodeFlow","clientId","verifier","generateCodeVerifier","challenge","generateCodeChallenge","localStorage","setItem","params","URLSearchParams","append","console","log","get","document","location","toString","getAccessToken","code","getItem","result","fetch","method","headers","body","access_token","json","length","text","possible","i","charAt","Math","floor","random","codeVerifier","data","TextEncoder","encode","digest","window","crypto","subtle","btoa","String","fromCharCode","apply","Uint8Array","replace"],"sources":["C:/Users/Leo/Documents/learningts/my-app/src/scripts/authCodeWithPkce.ts"],"sourcesContent":["export async function redirectToAuthCodeFlow(clientId: string) {\r\n    const verifier = generateCodeVerifier(128);\r\n    const challenge = await generateCodeChallenge(verifier);\r\n\r\n    localStorage.setItem(\"verifier\", verifier);\r\n\r\n    const params = new URLSearchParams();\r\n    params.append(\"client_id\", clientId);\r\n    params.append(\"response_type\", \"code\");\r\n    params.append(\"redirect_uri\", \"http://localhost:3000/callback\");\r\n    params.append(\"scope\", \"user-read-private user-read-email\");\r\n    params.append(\"code_challenge_method\", \"S256\");\r\n    params.append(\"code_challenge\", challenge);\r\n\r\n    console.log(\"CODE: \" + params.get(\"code\"))\r\n    localStorage.setItem(\"code\", params.get(\"code\"));\r\n\r\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\r\n}\r\n\r\nexport async function getAccessToken(clientId: string, code: string) {\r\n    const verifier = localStorage.getItem(\"verifier\");\r\n\r\n    const params = new URLSearchParams();\r\n    params.append(\"client_id\", clientId);\r\n    params.append(\"grant_type\", \"authorization_code\");\r\n    params.append(\"code\", code);\r\n    params.append(\"redirect_uri\", \"http://localhost:3000/callback\");\r\n    params.append(\"code_verifier\", verifier!);\r\n\r\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n        body: params\r\n    });\r\n\r\n    const { access_token } = await result.json();\r\n    return access_token;\r\n}\r\n\r\nfunction generateCodeVerifier(length: number) {\r\n    let text = '';\r\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n}\r\n\r\nasync function generateCodeChallenge(codeVerifier: string) {\r\n    const data = new TextEncoder().encode(codeVerifier);\r\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\r\n    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))\r\n        .replace(/\\+/g, '-')\r\n        .replace(/\\//g, '_')\r\n        .replace(/=+$/, '');\r\n}\r\n\r\nexport interface UserProfile {\r\n    country: string;\r\n    display_name: string;\r\n    email: string;\r\n    explicit_content: {\r\n        filter_enabled: boolean,\r\n        filter_locked: boolean\r\n    },\r\n    external_urls: { spotify: string; };\r\n    followers: { href: string; total: number; };\r\n    href: string;\r\n    id: string;\r\n    images: Image[];\r\n    product: string;\r\n    type: string;\r\n    uri: string;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}