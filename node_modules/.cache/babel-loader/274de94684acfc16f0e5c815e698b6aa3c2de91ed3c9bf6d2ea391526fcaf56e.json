{"ast":null,"code":"export async function fetchProfile(code) {\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchArtists(code, termIndex) {\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\n  const result = await fetch(`https://api.spotify.com/v1/me/top/artists?time_range=${terms[termIndex]}&limit=50`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchTracks(code, termIndex) {\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\n  const result = await fetch(`https://api.spotify.com/v1/me/top/tracks?time_range=${terms[termIndex]}&limit=50`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchAvalibleGenres(code) {\n  const result = await fetch(`https://api.spotify.com/v1/recommendations/available-genre-seeds`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchRecommendations(code) {\n  var _tracks$items$randomI;\n  const artists = await fetchArtists(code, 2);\n  const artistIds = artists.items.slice(0, 5).map(artist => artist.id);\n  const seed_artists = artistIds.join(\",\");\n  const genres = artists.items.slice(0, 5).map(artist => artist.genres).reduce((acc, genres) => acc.concat(genres), []);\n  // Remove duplicates by converting to a Set and then back to an array\n  const uniqueGenres = Array.from(new Set(genres));\n\n  // Fetch available genres\n  const availableGenres = await fetchAvalibleGenres(code);\n\n  // Filter unique genres based on available genres\n  const filteredGenres = uniqueGenres.filter(genre => availableGenres.genres.includes(genre));\n\n  // Limit the number of genres to 5\n  const limitedGenres = filteredGenres.slice(0, 5);\n  // Join genres into a single comma-separated string\n  const seed_genres = limitedGenres.join('%2C');\n  console.log(seed_genres);\n  const tracks = await fetchTracks(code, 1);\n  const randomIndex = Math.floor(Math.random() * tracks.items.length);\n  const seed_track = (_tracks$items$randomI = tracks.items[randomIndex]) === null || _tracks$items$randomI === void 0 ? void 0 : _tracks$items$randomI.id;\n  const result = await fetch(`https://api.spotify.com/v1/recommendations?seed_artists=${seed_artists}&seed_genres=classical&seed_tracks=${seed_track}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}","map":{"version":3,"names":["fetchProfile","code","result","fetch","method","headers","Authorization","json","fetchArtists","termIndex","terms","fetchTracks","fetchAvalibleGenres","fetchRecommendations","_tracks$items$randomI","artists","artistIds","items","slice","map","artist","id","seed_artists","join","genres","reduce","acc","concat","uniqueGenres","Array","from","Set","availableGenres","filteredGenres","filter","genre","includes","limitedGenres","seed_genres","console","log","tracks","randomIndex","Math","floor","random","length","seed_track"],"sources":["C:/Users/Leo/Documents/learningts/my-app/src/scripts/APIscript.ts"],"sourcesContent":["export async function fetchProfile(code: string): Promise<UserProfile> {\r\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\r\n    method: \"GET\",\r\n    headers: { Authorization: `Bearer ${code}` },\r\n  });\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchArtists(code: string, termIndex : number): Promise<any> {\r\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/me/top/artists?time_range=${terms[termIndex]}&limit=50`,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${code}`,\r\n      },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchTracks(code: string, termIndex : number): Promise<any> {\r\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\r\n  const result = await fetch(`https://api.spotify.com/v1/me/top/tracks?time_range=${terms[termIndex]}&limit=50`, {\r\n    method: \"GET\",\r\n    headers: { Authorization: `Bearer ${code}` },\r\n  });\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchAvalibleGenres(code: string): Promise<any> {\r\n  const result = await fetch(`https://api.spotify.com/v1/recommendations/available-genre-seeds`, {\r\n    method: \"GET\",\r\n    headers: { Authorization: `Bearer ${code}` },\r\n  });\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchRecommendations(code: string): Promise<any> {\r\n  const artists = await fetchArtists(code, 2);\r\n  const artistIds = artists.items.slice(0, 5).map((artist: any) => artist.id);\r\n  const seed_artists = artistIds.join(\",\");\r\n\r\n  const genres = artists.items\r\n  .slice(0, 5)\r\n  .map((artist: { genres: string[] }) => artist.genres)\r\n  .reduce((acc, genres) => acc.concat(genres), []);\r\n// Remove duplicates by converting to a Set and then back to an array\r\nconst uniqueGenres = Array.from(new Set(genres));\r\n\r\n// Fetch available genres\r\nconst availableGenres = await fetchAvalibleGenres(code);\r\n\r\n// Filter unique genres based on available genres\r\nconst filteredGenres = uniqueGenres.filter(genre => availableGenres.genres.includes(genre));\r\n\r\n// Limit the number of genres to 5\r\nconst limitedGenres = filteredGenres.slice(0, 5);\r\n// Join genres into a single comma-separated string\r\nconst seed_genres = limitedGenres.join('%2C');\r\n\r\nconsole.log(seed_genres);\r\n\r\n  const tracks = await fetchTracks(code, 1);\r\n  const randomIndex = Math.floor(Math.random() * tracks.items.length);\r\n  const seed_track = tracks.items[randomIndex]?.id;\r\n\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/recommendations?seed_artists=${seed_artists}&seed_genres=classical&seed_tracks=${seed_track}`,\r\n    {\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${code}` },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}