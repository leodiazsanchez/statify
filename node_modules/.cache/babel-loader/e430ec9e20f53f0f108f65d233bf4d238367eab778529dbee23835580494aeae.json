{"ast":null,"code":"export async function fetchProfile(code) {\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchArtists(code, termIndex) {\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\n  const result = await fetch(`https://api.spotify.com/v1/me/top/artists?time_range=${terms[termIndex]}&limit=50`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchTracks(code, termIndex) {\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\n  const result = await fetch(`https://api.spotify.com/v1/me/top/tracks?time_range=${terms[termIndex]}&limit=50`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchAvalibleGenres(code) {\n  const result = await fetch(`https://api.spotify.com/v1/recommendations/available-genre-seeds`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function recommendationSeeds(code) {\n  const artists = await fetchArtists(code, 2);\n  const artistIds = artists.items.slice(0, 2).map(artist => artist.id);\n  const seed_artists = artistIds.join(\"%2C\");\n  const genres = artists.items.slice(0, 2).map(artist => artist.genres).reduce((acc, genres) => acc.concat(genres), []);\n  // Remove duplicates by converting to a Set and then back to an array\n  const uniqueGenres = Array.from(new Set(genres));\n\n  // Fetch available genres\n  const availableGenres = await fetchAvalibleGenres(code);\n\n  // Filter unique genres based on available genres\n  const filteredGenres = uniqueGenres.filter(genre => availableGenres.genres.includes(genre));\n\n  // Limit the number of genres to 5\n  let limitedGenres = filteredGenres.slice(0, 5);\n\n  // Check if limitedGenres is empty\n  if (limitedGenres.length === 0) {\n    limitedGenres = [\"pop\", \"rap\"];\n  }\n\n  // Join genres into a single comma-separated string\n  const seed_genres = limitedGenres.join(\",\");\n  const tracks = await fetchTracks(code, 1);\n  const randomIndex = Math.floor(Math.random() * 20);\n  const seed_track = tracks.items[randomIndex].id;\n}\nexport async function fetchRecommendations(code) {\n  const result = await fetch(`https://api.spotify.com/v1/recommendations?seed_artists=4NHQUGzhtTLFvgF5SZesLK&seed_genres=classical%2Ccountry&seed_tracks=0c6xIDDpzE81m2q797ordA`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\n\n//https://api.spotify.com/v1/recommendations?seed_artists=${seed_artists}&seed_genres=${seed_genres}&seed_tracks=${seed_track}\n\nexport async function playRecommended(code, uri) {\n  const data = {\n    uris: [uri] // Convert uri to an array\n  };\n  console.log(uri);\n  const result = await fetch(`https://api.spotify.com/v1/me/player/play`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${code}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return await result.json();\n}","map":{"version":3,"names":["fetchProfile","code","result","fetch","method","headers","Authorization","json","fetchArtists","termIndex","terms","fetchTracks","fetchAvalibleGenres","recommendationSeeds","artists","artistIds","items","slice","map","artist","id","seed_artists","join","genres","reduce","acc","concat","uniqueGenres","Array","from","Set","availableGenres","filteredGenres","filter","genre","includes","limitedGenres","length","seed_genres","tracks","randomIndex","Math","floor","random","seed_track","fetchRecommendations","playRecommended","uri","data","uris","console","log","body","JSON","stringify"],"sources":["C:/Users/Leo/Documents/learningts/my-app/src/scripts/APIscript.ts"],"sourcesContent":["export async function fetchProfile(code: string): Promise<UserProfile> {\r\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\r\n    method: \"GET\",\r\n    headers: { Authorization: `Bearer ${code}` },\r\n  });\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchArtists(\r\n  code: string,\r\n  termIndex: number\r\n): Promise<any> {\r\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/me/top/artists?time_range=${terms[termIndex]}&limit=50`,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${code}`,\r\n      },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchTracks(\r\n  code: string,\r\n  termIndex: number\r\n): Promise<any> {\r\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/me/top/tracks?time_range=${terms[termIndex]}&limit=50`,\r\n    {\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${code}` },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchAvalibleGenres(code: string): Promise<any> {\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/recommendations/available-genre-seeds`,\r\n    {\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${code}` },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function recommendationSeeds(code: string): Promise<any> {\r\n  const artists = await fetchArtists(code, 2);\r\n  const artistIds = artists.items.slice(0, 2).map((artist: any) => artist.id);\r\n  const seed_artists = artistIds.join(\"%2C\");\r\n\r\n  const genres = artists.items\r\n    .slice(0, 2)\r\n    .map((artist: { genres: string[] }) => artist.genres)\r\n    .reduce((acc, genres) => acc.concat(genres), []);\r\n  // Remove duplicates by converting to a Set and then back to an array\r\n  const uniqueGenres = Array.from(new Set(genres));\r\n\r\n  // Fetch available genres\r\n  const availableGenres = await fetchAvalibleGenres(code);\r\n\r\n  // Filter unique genres based on available genres\r\n  const filteredGenres = uniqueGenres.filter((genre) =>\r\n    availableGenres.genres.includes(genre)\r\n  );\r\n\r\n  // Limit the number of genres to 5\r\n  let limitedGenres = filteredGenres.slice(0, 5);\r\n\r\n  // Check if limitedGenres is empty\r\n  if (limitedGenres.length === 0) {\r\n    limitedGenres = [\"pop\", \"rap\"];\r\n  }\r\n\r\n  // Join genres into a single comma-separated string\r\n  const seed_genres = limitedGenres.join(\",\");\r\n\r\n  const tracks = await fetchTracks(code, 1);\r\n  const randomIndex = Math.floor(Math.random() * 20);\r\n  const seed_track = tracks.items[randomIndex].id;\r\n}\r\n\r\nexport async function fetchRecommendations(code: string): Promise<any> {\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/recommendations?seed_artists=4NHQUGzhtTLFvgF5SZesLK&seed_genres=classical%2Ccountry&seed_tracks=0c6xIDDpzE81m2q797ordA`,\r\n    {\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${code}` },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n\r\n//https://api.spotify.com/v1/recommendations?seed_artists=${seed_artists}&seed_genres=${seed_genres}&seed_tracks=${seed_track}\r\n\r\n\r\n\r\nexport async function playRecommended(code: string, uri: string): Promise<any> {\r\n\r\n  const data = {\r\n    uris: [uri]  // Convert uri to an array\r\n  };\r\n  \r\n  console.log(uri)\r\n\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/me/player/play`,\r\n    {\r\n      method: \"PUT\",\r\n      headers: { \r\n        Authorization: `Bearer ${code}`,\r\n        'Content-Type': 'application/json'\r\n      }, \r\n      body: JSON.stringify(data)\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}