{"ast":null,"code":"const clientId = \"e5f9bfa9d40447488e4fc74d2c71d293\";\nconst params = new URLSearchParams(window.location.search);\nexport let code = params.get(\"code\");\nexport async function handleLogin() {\n  if (!code) {\n    redirectToAuthCodeFlow(clientId);\n  } else {\n    const accessToken = await getAccessToken(clientId, code);\n    const profile = await fetchProfile(accessToken);\n    populateUI(profile);\n  }\n}\nexport function handleLogout() {\n  code = \"\";\n  document.location = `http://localhost:3000/`;\n}\nasync function redirectToAuthCodeFlow(clientId) {\n  const verifier = generateCodeVerifier(128);\n  const challenge = await generateCodeChallenge(verifier);\n  localStorage.setItem(\"verifier\", verifier);\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"response_type\", \"code\");\n  params.append(\"redirect_uri\", \"http://localhost:3000/callback\");\n  params.append(\"scope\", \"user-read-private user-read-email playlist-read-private\");\n  params.append(\"code_challenge_method\", \"S256\");\n  params.append(\"code_challenge\", challenge);\n  document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n}\nfunction generateCodeVerifier(length) {\n  let text = '';\n  let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nasync function generateCodeChallenge(codeVerifier) {\n  const data = new TextEncoder().encode(codeVerifier);\n  const digest = await window.crypto.subtle.digest('SHA-256', data);\n  return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)])).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}\nasync function getAccessToken(clientId, code) {\n  const verifier = localStorage.getItem(\"verifier\");\n  const params = new URLSearchParams();\n  params.append(\"client_id\", clientId);\n  params.append(\"grant_type\", \"authorization_code\");\n  params.append(\"code\", code);\n  params.append(\"redirect_uri\", \"http://localhost:5173/callback\");\n  params.append(\"code_verifier\", verifier);\n  const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: params\n  });\n  const {\n    access_token\n  } = await result.json();\n  return access_token;\n}\nasync function fetchProfile(token) {\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return await result.json();\n}\nfunction populateUI(profile) {\n  // TODO: Update UI with profile data\n}","map":{"version":3,"names":["clientId","params","URLSearchParams","window","location","search","code","get","handleLogin","redirectToAuthCodeFlow","accessToken","getAccessToken","profile","fetchProfile","populateUI","handleLogout","document","verifier","generateCodeVerifier","challenge","generateCodeChallenge","localStorage","setItem","append","toString","length","text","possible","i","charAt","Math","floor","random","codeVerifier","data","TextEncoder","encode","digest","crypto","subtle","btoa","String","fromCharCode","apply","Uint8Array","replace","getItem","result","fetch","method","headers","body","access_token","json","token","Authorization"],"sources":["C:/Users/Leo/Documents/learningts/my-app/src/scripts/login.ts"],"sourcesContent":["const clientId = \"e5f9bfa9d40447488e4fc74d2c71d293\";\r\nconst params = new URLSearchParams(window.location.search);\r\nexport let code = params.get(\"code\");\r\n\r\nexport async function handleLogin() : Promise<any> {\r\n    if (!code) {\r\n        redirectToAuthCodeFlow(clientId);\r\n    } else {\r\n        const accessToken = await getAccessToken(clientId, code);\r\n        const profile = await fetchProfile(accessToken);\r\n        populateUI(profile);\r\n    }\r\n}\r\n\r\nexport function handleLogout() : void {\r\n    code = \"\";\r\n    document.location = `http://localhost:3000/`;\r\n}\r\n\r\nasync function redirectToAuthCodeFlow(clientId: string) {\r\n    const verifier = generateCodeVerifier(128);\r\n    const challenge = await generateCodeChallenge(verifier);\r\n\r\n    localStorage.setItem(\"verifier\", verifier);\r\n\r\n    const params = new URLSearchParams();\r\n    params.append(\"client_id\", clientId);\r\n    params.append(\"response_type\", \"code\");\r\n    params.append(\"redirect_uri\", \"http://localhost:3000/callback\");\r\n    params.append(\"scope\", \"user-read-private user-read-email playlist-read-private\");\r\n    params.append(\"code_challenge_method\", \"S256\");\r\n    params.append(\"code_challenge\", challenge);\r\n\r\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\r\n}\r\n\r\nfunction generateCodeVerifier(length: number) {\r\n    let text = '';\r\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n}\r\n\r\nasync function generateCodeChallenge(codeVerifier: string) {\r\n    const data = new TextEncoder().encode(codeVerifier);\r\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\r\n    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))\r\n        .replace(/\\+/g, '-')\r\n        .replace(/\\//g, '_')\r\n        .replace(/=+$/, '');\r\n}\r\n\r\nasync function getAccessToken(clientId: string, code: string): Promise<string> {\r\n    const verifier = localStorage.getItem(\"verifier\");\r\n\r\n    const params = new URLSearchParams();\r\n    params.append(\"client_id\", clientId);\r\n    params.append(\"grant_type\", \"authorization_code\");\r\n    params.append(\"code\", code);\r\n    params.append(\"redirect_uri\", \"http://localhost:5173/callback\");\r\n    params.append(\"code_verifier\", verifier!);\r\n\r\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n        body: params\r\n    });\r\n\r\n    const { access_token } = await result.json();\r\n    return access_token;\r\n}\r\n\r\nasync function fetchProfile(token: string): Promise<any> {\r\n    const result = await fetch(\"https://api.spotify.com/v1/me\", {\r\n        method: \"GET\", headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n\r\n    return await result.json();\r\n}\r\n\r\nfunction populateUI(profile: any) {\r\n    // TODO: Update UI with profile data\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}