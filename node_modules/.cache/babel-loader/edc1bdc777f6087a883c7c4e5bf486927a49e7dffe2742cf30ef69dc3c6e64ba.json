{"ast":null,"code":"export async function fetchProfile(code) {\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchArtists(code, termIndex) {\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\n  const result = await fetch(`https://api.spotify.com/v1/me/top/artists?time_range=${terms[termIndex]}&limit=50`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchTracks(code, termIndex) {\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\n  const result = await fetch(`https://api.spotify.com/v1/me/top/tracks?time_range=${terms[termIndex]}&limit=50`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}\nexport async function fetchRecommendations(code) {\n  const artists = await fetchArtists(code, 2);\n  const artistIds = artists.items.slice(0, 2).map(artist => artist.id);\n  const seed_artists = artistIds.join(\",\");\n  const genres = artists.map(artist => artist.genres).reduce((acc, genres) => acc.concat(genres), []);\n\n  // Join genres into a single comma-separated string\n  const seed_genres = genres.join(', ');\n  const tracks = await fetchTracks(code, 1);\n  const randomIndex = Math.floor(Math.random() * 20);\n  const seed_track = tracks.items[randomIndex].id;\n  const result = await fetch(`https://api.spotify.com/v1/recommendations?seed_artists=${seed_artists}&seed_genres=${seed_genres}&seed_tracks=${seed_track}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${code}`\n    }\n  });\n  return await result.json();\n}","map":{"version":3,"names":["fetchProfile","code","result","fetch","method","headers","Authorization","json","fetchArtists","termIndex","terms","fetchTracks","fetchRecommendations","artists","artistIds","items","slice","map","artist","id","seed_artists","join","genres","reduce","acc","concat","seed_genres","tracks","randomIndex","Math","floor","random","seed_track"],"sources":["C:/Users/Leo/Documents/learningts/my-app/src/scripts/APIscript.ts"],"sourcesContent":["export async function fetchProfile(code: string): Promise<UserProfile> {\r\n  const result = await fetch(\"https://api.spotify.com/v1/me\", {\r\n    method: \"GET\",\r\n    headers: { Authorization: `Bearer ${code}` },\r\n  });\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchArtists(code: string, termIndex : number): Promise<any> {\r\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/me/top/artists?time_range=${terms[termIndex]}&limit=50`,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${code}`,\r\n      },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchTracks(code: string, termIndex : number): Promise<any> {\r\n  const terms = [\"short_term\", \"medium_term\", \"long_term\"];\r\n  const result = await fetch(`https://api.spotify.com/v1/me/top/tracks?time_range=${terms[termIndex]}&limit=50`, {\r\n    method: \"GET\",\r\n    headers: { Authorization: `Bearer ${code}` },\r\n  });\r\n\r\n  return await result.json();\r\n}\r\n\r\nexport async function fetchRecommendations(code: string): Promise<any> {\r\n  const artists = await fetchArtists(code, 2);\r\n  const artistIds = artists.items.slice(0, 2).map((artist: any) => artist.id);\r\n  const seed_artists = artistIds.join(\",\");\r\n  \r\n  const genres = artists.map((artist: { genres: string[] }) => artist.genres).reduce((acc, genres) => acc.concat(genres), []);\r\n\r\n  // Join genres into a single comma-separated string\r\n  const seed_genres = genres.join(', ');\r\n  \r\n\r\n  const tracks = await fetchTracks(code,1);\r\n  const randomIndex = Math.floor(Math.random() * 20);\r\n  const seed_track = tracks.items[randomIndex].id;\r\n\r\n  const result = await fetch(\r\n    `https://api.spotify.com/v1/recommendations?seed_artists=${seed_artists}&seed_genres=${seed_genres}&seed_tracks=${seed_track}`,\r\n    {\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${code}` },\r\n    }\r\n  );\r\n\r\n  return await result.json();\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,YAAYA,CAACC,IAAY,EAAwB;EACrE,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;IAC1DC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUL,IAAI;IAAG;EAC7C,CAAC,CAAC;EAEF,OAAO,MAAMC,MAAM,CAACK,IAAI,CAAC,CAAC;AAC5B;AAEA,OAAO,eAAeC,YAAYA,CAACP,IAAY,EAAEQ,SAAkB,EAAgB;EACjF,MAAMC,KAAK,GAAG,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,CAAC;EACxD,MAAMR,MAAM,GAAG,MAAMC,KAAK,CACxB,wDAAwDO,KAAK,CAACD,SAAS,CAAC,WAAW,EACnF;IACEL,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUL,IAAI;IAC/B;EACF,CACF,CAAC;EAED,OAAO,MAAMC,MAAM,CAACK,IAAI,CAAC,CAAC;AAC5B;AAEA,OAAO,eAAeI,WAAWA,CAACV,IAAY,EAAEQ,SAAkB,EAAgB;EAChF,MAAMC,KAAK,GAAG,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,CAAC;EACxD,MAAMR,MAAM,GAAG,MAAMC,KAAK,CAAC,uDAAuDO,KAAK,CAACD,SAAS,CAAC,WAAW,EAAE;IAC7GL,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUL,IAAI;IAAG;EAC7C,CAAC,CAAC;EAEF,OAAO,MAAMC,MAAM,CAACK,IAAI,CAAC,CAAC;AAC5B;AAEA,OAAO,eAAeK,oBAAoBA,CAACX,IAAY,EAAgB;EACrE,MAAMY,OAAO,GAAG,MAAML,YAAY,CAACP,IAAI,EAAE,CAAC,CAAC;EAC3C,MAAMa,SAAS,GAAGD,OAAO,CAACE,KAAK,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAACC,EAAE,CAAC;EAC3E,MAAMC,YAAY,GAAGN,SAAS,CAACO,IAAI,CAAC,GAAG,CAAC;EAExC,MAAMC,MAAM,GAAGT,OAAO,CAACI,GAAG,CAAEC,MAA4B,IAAKA,MAAM,CAACI,MAAM,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEF,MAAM,KAAKE,GAAG,CAACC,MAAM,CAACH,MAAM,CAAC,EAAE,EAAE,CAAC;;EAE3H;EACA,MAAMI,WAAW,GAAGJ,MAAM,CAACD,IAAI,CAAC,IAAI,CAAC;EAGrC,MAAMM,MAAM,GAAG,MAAMhB,WAAW,CAACV,IAAI,EAAC,CAAC,CAAC;EACxC,MAAM2B,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;EAClD,MAAMC,UAAU,GAAGL,MAAM,CAACZ,KAAK,CAACa,WAAW,CAAC,CAACT,EAAE;EAE/C,MAAMjB,MAAM,GAAG,MAAMC,KAAK,CACxB,2DAA2DiB,YAAY,gBAAgBM,WAAW,gBAAgBM,UAAU,EAAE,EAC9H;IACE5B,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUL,IAAI;IAAG;EAC7C,CACF,CAAC;EAED,OAAO,MAAMC,MAAM,CAACK,IAAI,CAAC,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}